datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  authenticators Authenticator[]

  userOrganizations UserOrganization[]
  userBoards        UserBoard[]
  userCards         UserCard[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Organization {
  id    String @id @default(cuid())
  title String
  image String

  userOrganizations UserOrganization[]
  boards            Board[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserOrganization {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([userId, organizationId])
}

model Board {
  id    String @id @default(cuid())
  title String
  image String

  orgId        String
  organization Organization @relation(fields: [orgId], references: [id])

  userBoards UserBoard[]
  lists      List[]
  cards      Card[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserBoard {
  id      String @id @default(cuid())
  userId  String
  boardId String
  user    User   @relation(fields: [userId], references: [id])
  board   Board  @relation(fields: [boardId], references: [id])

  @@unique([userId, boardId])
}

model List {
  id    String @id @default(cuid())
  title String
  order Int

  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  cards Card[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id          String  @id @default(cuid())
  title       String
  order       Int
  description String?

  listId String
  list   List   @relation(fields: [listId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  userCards UserCard[]
  labels    Label[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserCard {
  id     String @id @default(cuid())
  userId String
  cardId String
  user   User   @relation(fields: [userId], references: [id])
  card   Card   @relation(fields: [cardId], references: [id])

  @@unique([userId, cardId])
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
  MOVE
  ARCHIVE
  RESTORE
}

model AudLog {
  id         String  @id @default(cuid())
  orgId      String?
  action     ACTION
  tableId    String
  tableName  String
  tableTitle String
  userId     String
  userImage  String
  userName   String

  createdAt DateTime @default(now())
}

model Label {
  id    String @id @default(cuid())
  name  String
  color String

  cardId String?
  card   Card?   @relation(fields: [cardId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}
